import random

import requests
from aiogram import Bot, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import Dispatcher
from aiogram.dispatcher.filters import Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils import executor
from bs4 import BeautifulSoup

import SearchParser
import Parser

token = "6077834064:AAEi70eoSxqqIu9YC3eiuQKB2jM1XjP9sMI"
bot = Bot(token=token)
memory_storage = MemoryStorage()
dp = Dispatcher(bot, storage=memory_storage)
url = "https://eda.ru/recepty"



@dp.message_handler(commands=['start', 'help'])
async def send_welcome(msg: types.message):
    chat_id = msg.chat.id
    await msg.reply(f'–ü—Ä–∏–≤–µ—Ç, —è - –±–æ—Ç –ø–æ–º–æ—â–Ω–∏–∫ –ø–æ–≤–∞—Ä–∞. –ü—Ä–∏—è—Ç–Ω–æ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {msg.from_user.full_name}')
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="üîç–ü–æ–∏—Å–∫"),
                KeyboardButton(text="üìÉ–°–ª—É—á–∞–π–Ω—ã–π"),
            ]
        ],
        resize_keyboard=True
    )
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(chat_id=chat_id, text="–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:", reply_markup=keyboard)


@dp.message_handler(Text("üîç–ü–æ–∏—Å–∫"))  # –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /recipe
async def get_recipe(msg: types.Message):
    chat_id = msg.chat.id
    await bot.send_message(chat_id=chat_id,text="–í–≤–µ–¥–∏—Ç–µ –±–ª—é–¥–æ, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã —Ö–æ—Ç–∏—Ç–µ –Ω–∞–π—Ç–∏")
    @dp.message_handler()
    async def recipe(msg: types.Message):
        search = msg.text
        recipe = Parser.get_recipe(search)
        if recipe:
            await msg.answer(recipe)  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ—Ü–µ–ø—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        else:
            await msg.answer('–†–µ—Ü–µ–ø—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω')  # –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ

    # search = msg.text.split('/recipe ')[1]  # –ø–æ–ª—É—á–∞–µ–º –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    #   # –≤—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ Parser –∏ –ø–æ–ª—É—á–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    #


@dp.message_handler(Text("üìÉ–°–ª—É—á–∞–π–Ω—ã–π"))
async def handle_message(msg: types.Message):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–ª—É—á–∞–π–Ω—ã–π —Ä–µ—Ü–µ–ø—Ç
    await msg.answer(SearchParser.random_recipe())

    @dp.message_handler()
    async def handle_message2(msg: types.Message):
        choice = msg.text
        await msg.answer(SearchParser.random_recipe2(choice))


def documentation():
    i = 0
    for methods in dir(Parser):
        print(dir(Parser)[i], "--", eval("Parser." + methods + ".__doc__"))
        i += 1


if __name__ == '__main__':
    executor.start_polling(dp)
    # documentation()
